{
	// http://eslint.org/docs/rules/


	// 2 - enabled, exit with error, 1 - enabled, exit with warning, 0 - disabled

	"env": {
		"browser": true,     // browser global variables.
		"node": true,        // Node.js global variables and Node.js-specific rules.
		"jasmine": true,     // adds all of the Jasmine testing global variables for version 1.3 and 2.0.
		"phantomjs": true,   // phantomjs global variables.
		"jquery": true      // jquery global variables.
	},

	"globals": {
		"angular": true
	},

	"plugins": [
		// e.g. "react" (must run `npm install eslint-plugin-react` first)
	],

	"rules": {

		////////// Possible Errors //////////

		"no-cond-assign": 2,          	// disallow assignment in conditional expressions
		"no-constant-condition": 2,   // disallow use of constant expressions in conditions
		"no-control-regex": 2,
		"no-debugger": 2,             // disallow use of debugger
		"no-dupe-keys": 2,            // disallow duplicate keys when creating object literals
		"no-dupe-args": 2,
		"no-duplicate-case": 2,
		"no-empty": 2,
		"no-empty-character-class": 2,
		"no-ex-assign": 2,
		"no-extra-boolean-cast": 2,
		"no-extra-semi": 2,           // disallow unnecessary semicolons
		"no-func-assign": 2,          // disallow overwriting functions written as function declarations
		"no-inner-declarations": 2,   // disallow function or variable declarations in nested blocks
		"no-invalid-regexp": 2,       // disallow invalid regular expression strings in the RegExp constructor
		"no-irregular-whitespace": 2, // disallow irregular whitespace outside of strings and comments
		"no-negated-in-lhs": 2,
		"no-obj-calls":2,
		"no-regex-spaces": 2,         // disallow multiple spaces in a regular expression literal
		"no-sparse-arrays": 2,        // disallow sparse arrays
		"no-unreachable": 2,          // disallow unreachable statements after a return, throw, continue, or break statement
		"use-isnan": 2,               // disallow comparisons with the value NaN
		"valid-typeof": 2,            // Ensure that the results of typeof are compared against a valid string


		////////// Best Practices ////////////

		"guard-for-in": 2,
		"no-fallthrough": 2,
		"no-multi-spaces": 2,
		"no-native-reassign": 2,
		"no-octal": 2,
		"no-redeclare": 2,
		"no-useless-escape": 2,
		//"vars-on-top": 2,
		"complexity":["error", 10],


		////////// Stylistic Issues //////////

		"array-bracket-spacing": 2,
		"block-spacing": 2,
		"brace-style": 2,
		"comma-dangle": 2,
		"comma-spacing":["error",{"before":false, "after":true}],
		"comma-style":["error","last"],
		"consistent-this": ["error","that"],
		"key-spacing": ["error",{"beforeColon": false, "afterColon": true}],
		"keyword-spacing": ["error", {"before":true,"after":true}],//also you may use owerrides for some keywords
		"linebreak-style": ["error", "unix"],
		"newline-after-var":["error", "always"],
		"no-lonely-if": 2,
		"no-mixed-spaces-and-tabs":["error", "smart-tabs"],
		"no-spaced-func":2,
		"no-trailing-spaces":2,
		"no-whitespace-before-property":2,
		"object-curly-spacing":2,
		"operator-linebreak":["error", "after"],
		"quotes": ["error", "single"],
		"semi":2,
		"semi-spacing":["error",{"before":false, "after":true}],
		"space-before-blocks":2,
		"space-before-function-paren":["error",{"anonymous":"always","named":"never"}],
		"space-infix-ops":2

	}
}
